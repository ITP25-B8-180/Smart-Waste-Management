const Complaint = require('../models/Complaint');

// Get all complaints
exports.getAllComplaints = async (req, res) => {
  try {
    const { status, issueType, search } = req.query;
    let filter = {};
    
    if (status && status !== 'all') {
      filter.status = status;
    }
    
    if (issueType && issueType !== 'all') {
      filter.issueType = issueType;
    }
    
    if (search) {
      filter.$or = [
        { name: { $regex: search, $options: 'i' } },
        { email: { $regex: search, $options: 'i' } },
        { issueType: { $regex: search, $options: 'i' } },
        { problem: { $regex: search, $options: 'i' } }
      ];
    }
    
    const complaints = await Complaint.find(filter).sort({ date: -1 });
    res.json({
      success: true,
      count: complaints.length,
      data: complaints
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
};

// Create new complaint
exports.createComplaint = async (req, res) => {
  try {
    const { name, email, phone, address, issueType, weight, problem } = req.body;
    
    // Validate required fields
    if (!name || !email || !address || !issueType || !problem) {
      return res.status(400).json({
        success: false,
        message: 'Name, email, address, issue type, and problem description are required'
      });
    }
    
    // Handle file uploads if any
    const files = req.files ? req.files.map(file => file.filename) : [];
    
    const newComplaint = new Complaint({
      name,
      email,
      phone: phone || '',
      address,
      issueType,
      weight: weight ? parseFloat(weight) : null,
      problem,
      files
    });
    
    const savedComplaint = await newComplaint.save();
    res.status(201).json({
      success: true,
      data: savedComplaint
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

// Update complaint status
exports.updateComplaintStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    
    // Validate status
    const validStatuses = ['pending', 'in-progress', 'resolved'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid status. Must be one of: pending, in-progress, resolved'
      });
    }
    
    const complaint = await Complaint.findByIdAndUpdate(
      id,
      { status },
      { new: true, runValidators: true }
    );
    
    if (!complaint) {
      return res.status(404).json({
        success: false,
        message: 'Complaint not found'
      });
    }
    
    res.json({
      success: true,
      data: complaint
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

// Update complaint notes
exports.updateComplaintNotes = async (req, res) => {
  try {
    const { id } = req.params;
    const { notes } = req.body;
    
    const complaint = await Complaint.findByIdAndUpdate(
      id,
      { notes: notes || '' },
      { new: true }
    );
    
    if (!complaint) {
      return res.status(404).json({
        success: false,
        message: 'Complaint not found'
      });
    }
    
    res.json({
      success: true,
      data: complaint
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

// Delete complaint
exports.deleteComplaint = async (req, res) => {
  try {
    const { id } = req.params;
    
    const complaint = await Complaint.findByIdAndDelete(id);
    
    if (!complaint) {
      return res.status(404).json({
        success: false,
        message: 'Complaint not found'
      });
    }
    
    // Delete associated files
    if (complaint.files && complaint.files.length > 0) {
      const fs = require('fs');
      const path = require('path');
      
      complaint.files.forEach(filename => {
        const filePath = path.join(__dirname, '../uploads', filename);
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
        }
      });
    }
    
    res.json({
      success: true,
      message: 'Complaint deleted successfully'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
};

// Get complaint by ID
exports.getComplaintById = async (req, res) => {
  try {
    const { id } = req.params;
    
    const complaint = await Complaint.findById(id);
    
    if (!complaint) {
      return res.status(404).json({
        success: false,
        message: 'Complaint not found'
      });
    }
    
    res.json({
      success: true,
      data: complaint
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
};