const Feedback = require('../models/Feedback');

// Get all feedbacks
exports.getAllFeedbacks = async (req, res) => {
  try {
    const { rating, search, limit } = req.query;
    let filter = {};
    
    if (rating && rating !== 'all') {
      filter.rating = parseInt(rating);
    }
    
    if (search) {
      filter.$or = [
        { name: { $regex: search, $options: 'i' } },
        { comment: { $regex: search, $options: 'i' } }
      ];
    }
    
    let query = Feedback.find(filter).sort({ date: -1 });
    
    if (limit && !isNaN(limit)) {
      query = query.limit(parseInt(limit));
    }
    
    const feedbacks = await query;
    res.json({
      success: true,
      count: feedbacks.length,
      data: feedbacks
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
};

// Create new feedback
exports.createFeedback = async (req, res) => {
  try {
    const { name, rating, comment } = req.body;
    
    // Validate required fields
    if (!name || !rating || !comment) {
      return res.status(400).json({
        success: false,
        message: 'Name, rating, and comment are required'
      });
    }
    
    const newFeedback = new Feedback({
      name,
      rating: parseInt(rating),
      comment
    });
    
    const savedFeedback = await newFeedback.save();
    res.status(201).json({
      success: true,
      data: savedFeedback
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

// Add reply to feedback
exports.addReply = async (req, res) => {
  try {
    const { id } = req.params;
    const { admin, text } = req.body;
    
    // Validate required fields
    if (!admin || !text) {
      return res.status(400).json({
        success: false,
        message: 'Admin name and reply text are required'
      });
    }
    
    const feedback = await Feedback.findById(id);
    if (!feedback) {
      return res.status(404).json({
        success: false,
        message: 'Feedback not found'
      });
    }
    
    feedback.replies.push({
      admin,
      text,
      date: new Date()
    });
    
    const updatedFeedback = await feedback.save();
    res.json({
      success: true,
      data: updatedFeedback
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

// Update reply
exports.updateReply = async (req, res) => {
  try {
    const { id, replyId } = req.params;
    const { text } = req.body;
    
    // Validate required fields
    if (!text) {
      return res.status(400).json({
        success: false,
        message: 'Reply text is required'
      });
    }
    
    const feedback = await Feedback.findById(id);
    if (!feedback) {
      return res.status(404).json({
        success: false,
        message: 'Feedback not found'
      });
    }
    
    const reply = feedback.replies.id(replyId);
    if (!reply) {
      return res.status(404).json({
        success: false,
        message: 'Reply not found'
      });
    }
    
    reply.text = text;
    reply.date = new Date(); // Update the date
    
    const updatedFeedback = await feedback.save();
    res.json({
      success: true,
      data: updatedFeedback
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

// Delete reply
exports.deleteReply = async (req, res) => {
  try {
    const { id, replyId } = req.params;
    
    const feedback = await Feedback.findById(id);
    if (!feedback) {
      return res.status(404).json({
        success: false,
        message: 'Feedback not found'
      });
    }
    
    const reply = feedback.replies.id(replyId);
    if (!reply) {
      return res.status(404).json({
        success: false,
        message: 'Reply not found'
      });
    }
    
    reply.deleteOne();
    
    const updatedFeedback = await feedback.save();
    res.json({
      success: true,
      data: updatedFeedback,
      message: 'Reply deleted successfully'
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message
    });
  }
};

// Delete feedback
exports.deleteFeedback = async (req, res) => {
  try {
    const { id } = req.params;
    
    const feedback = await Feedback.findByIdAndDelete(id);
    if (!feedback) {
      return res.status(404).json({
        success: false,
        message: 'Feedback not found'
      });
    }
    
    res.json({
      success: true,
      message: 'Feedback deleted successfully'
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      message: error.message
    });
  }
};