import React, { useState } from 'react'
import { useAuth } from '../contexts/AuthContext'
import api from '../utils/api'
import toast from 'react-hot-toast'
import { Key, Copy, RefreshCw, Shield, Eye, EyeOff, Download } from 'lucide-react'

const AdminKeyManager = () => {
  const { user } = useAuth()
  const [generatedKeys, setGeneratedKeys] = useState([])
  const [isGenerating, setIsGenerating] = useState(false)
  const [visibleKeys, setVisibleKeys] = useState({})

  const generateNewKey = async () => {
    setIsGenerating(true)
    try {
      const response = await api.get('/auth/generate-admin-key')
      if (response.data.success) {
        const newKey = {
          key: response.data.adminKey,
          generatedAt: new Date().toISOString(),
          generatedBy: user?.name || 'System'
        }
        setGeneratedKeys(prev => [newKey, ...prev])
        toast.success('New admin key generated successfully!')
      }
    } catch (error) {
      console.error('Error generating admin key:', error)
      toast.error('Failed to generate admin key')
    } finally {
      setIsGenerating(false)
    }
  }

  const copyKey = (key) => {
    navigator.clipboard.writeText(key)
    toast.success('Admin key copied to clipboard!')
  }

  const toggleKeyVisibility = (index) => {
    setVisibleKeys(prev => ({
      ...prev,
      [index]: !prev[index]
    }))
  }

  const exportKeys = () => {
    const keysData = generatedKeys.map((keyData, index) => ({
      'Key': keyData.key,
      'Generated At': new Date(keyData.generatedAt).toLocaleString(),
      'Generated By': keyData.generatedBy
    }))

    const csvContent = [
      Object.keys(keysData[0]).join(','),
      ...keysData.map(row => Object.values(row).join(','))
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = `admin-keys-${new Date().toISOString().split('T')[0]}.csv`
    document.body.appendChild(link)
    link.click()
    link.remove()
    window.URL.revokeObjectURL(url)
    
    toast.success('Admin keys exported successfully!')
  }

  return (
    <div className="max-w-4xl mx-auto">
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Admin Key Manager</h1>
            <p className="text-gray-600">Generate and manage admin access keys</p>
          </div>
          <div className="flex space-x-3">
            {generatedKeys.length > 0 && (
              <button
                onClick={exportKeys}
                className="btn-secondary flex items-center"
              >
                <Download className="h-4 w-4 mr-2" />
                Export Keys
              </button>
            )}
            <button
              onClick={generateNewKey}
              disabled={isGenerating}
              className="btn-primary flex items-center"
            >
              {isGenerating ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              ) : (
                <Key className="h-4 w-4 mr-2" />
              )}
              Generate New Key
            </button>
          </div>
        </div>
      </div>

      {/* Security Notice */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-8">
        <div className="flex items-start">
          <Shield className="h-6 w-6 text-yellow-600 mr-3 mt-0.5" />
          <div>
            <h3 className="text-lg font-semibold text-yellow-800 mb-2">
              Security Notice
            </h3>
            <p className="text-yellow-700 text-sm mb-2">
              Admin keys provide full access to the system. Please:
            </p>
            <ul className="text-yellow-700 text-sm list-disc list-inside space-y-1">
              <li>Store keys securely and do not share them publicly</li>
              <li>Only provide keys to authorized personnel</li>
              <li>Monitor key usage and revoke if necessary</li>
              <li>Keep track of who has access to which keys</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Generated Keys List */}
      {generatedKeys.length === 0 ? (
        <div className="text-center py-12">
          <Key className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No admin keys generated</h3>
          <p className="text-gray-500 mb-6">Generate your first admin key to get started</p>
          <button
            onClick={generateNewKey}
            disabled={isGenerating}
            className="btn-primary flex items-center mx-auto"
          >
            {isGenerating ? (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
            ) : (
              <Key className="h-4 w-4 mr-2" />
            )}
            Generate First Key
          </button>
        </div>
      ) : (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold text-gray-900">Generated Admin Keys</h2>
          {generatedKeys.map((keyData, index) => (
            <div key={index} className="card">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center mb-2">
                    <Key className="h-5 w-5 text-primary-600 mr-2" />
                    <span className="text-sm font-medium text-gray-700">Admin Key #{index + 1}</span>
                  </div>
                  <div className="flex items-center space-x-4">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2">
                        <code className="bg-gray-100 px-3 py-2 rounded text-sm font-mono">
                          {visibleKeys[index] ? keyData.key : 'â€¢'.repeat(keyData.key.length)}
                        </code>
                        <button
                          onClick={() => toggleKeyVisibility(index)}
                          className="p-1 text-gray-400 hover:text-gray-600"
                          title={visibleKeys[index] ? 'Hide key' : 'Show key'}
                        >
                          {visibleKeys[index] ? (
                            <EyeOff className="h-4 w-4" />
                          ) : (
                            <Eye className="h-4 w-4" />
                          )}
                        </button>
                        <button
                          onClick={() => copyKey(keyData.key)}
                          className="p-1 text-gray-400 hover:text-gray-600"
                          title="Copy key"
                        >
                          <Copy className="h-4 w-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                  <div className="mt-2 text-xs text-gray-500">
                    Generated on {new Date(keyData.generatedAt).toLocaleString()} by {keyData.generatedBy}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Usage Instructions */}
      <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-blue-800 mb-4">How to Use Admin Keys</h3>
        <div className="space-y-3 text-sm text-blue-700">
          <div className="flex items-start">
            <span className="font-medium mr-2">1.</span>
            <span>Generate a new admin key using the "Generate New Key" button above</span>
          </div>
          <div className="flex items-start">
            <span className="font-medium mr-2">2.</span>
            <span>Copy the generated key and provide it to authorized personnel</span>
          </div>
          <div className="flex items-start">
            <span className="font-medium mr-2">3.</span>
            <span>Users can use the key during admin registration at <code className="bg-blue-100 px-1 rounded">/admin-signup</code></span>
          </div>
          <div className="flex items-start">
            <span className="font-medium mr-2">4.</span>
            <span>Keep track of key usage and revoke access if necessary</span>
          </div>
        </div>
      </div>
    </div>
  )
}

export default AdminKeyManager
